# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import tensorflow.keras as tf
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn import model_selection
from sklearn.naive_bayes import GaussianNB
from sklearn import svm
from sklearn import tree
from sklearn.ensemble import VotingClassifier
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score
from sklearn.metrics import cohen_kappa_score
import sklearn
import scikitplot as skplt
import matplotlib.pyplot as plt
import sklearn
# STEP 1: Generate Two Large Prime Numbers (p,q) randomly
from random import randrange, getrandbits
from tkinter import *
from tkinter import ttk  
from tkinter import Menu  
from tkinter import messagebox as mbox  
# import filedialog module
from tkinter import filedialog
flg = 0;
import tkinter as tk


def browseFiles(): filename = filedialog.askopenfilename(initialdir = “ / ” title = "Select a CSV File",
 filetypes = (("CSV files",  ".csv ”) ("all files", ".")))
    # Change label contents
    label_file_explorer.configure(text="File Opened: "+filename)
    global f
    f = filename


# Importing the dataset
dataset = pd.read_csv('diabetes.csv')
dataset=dataset.dropna(how="any")
print(dataset)

print(dataset.info())

X = dataset.iloc[:,:-1].values
y = dataset.iloc[:, 8].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 101)



#decision tree training
print("LR training")
model1 = LogisticRegression()
model1.fit(X_train, y_train)
y_pred = model1.predict(X_test)
print("ypred of Logistic regression ")
print(y_pred)


#confussion Matrix
cm = confusion_matrix(y_test, y_pred)
print("Confussion Matrix for logistic regression")
print(cm)
cmd=cm
fig, ax = plt.subplots(figsize=(7.5, 7.5))
ax.matshow(cmd, cmap=plt.cm.Blues, alpha=0.3)
for i in range(cmd.shape[0]):
    for j in range(cmd.shape[1]):
        ax.text(x=j, y=i,s=cmd[i, j], va='center', ha='center', size='xx-large')
 
plt.xlabel('Predictions', fontsize=18)
plt.ylabel('Actuals', fontsize=18)
plt.title('Confusion Matrix of LR', fontsize=18)
plt.show()
fpr2, tpr2, _ = sklearn.metrics.roc_curve(y_test, y_pred)
auc_score2 = sklearn.metrics.auc(fpr2, tpr2)

lr = accuracy_score(y_test, y_pred)

print("LR accuracy is ")
print(lr)
print("")


testy = y_test
yhat_classes = y_pred
precision = precision_score(testy, yhat_classes)
print('Precision: %f' % precision)
recall = recall_score(testy, yhat_classes)
print('Recall: %f' % recall)
f1 = f1_score(testy, yhat_classes)
print('F1 score: %f' % f1)
 
# kappa
kappa = cohen_kappa_score(testy, yhat_classes)
print('Cohens kappa: %f' % kappa)


#svm training
print("svm training")
model3 =svm.SVC()
model3.fit(X_train, y_train)
y_pred = model3.predict(X_test)
print("ypred of SVM ")
print(y_pred)


#confussion Matrix
cm = confusion_matrix(y_test, y_pred)
print("Confussion Matrix for SVM")
print(cm)
cmd=cm
fig, ax = plt.subplots(figsize=(7.5, 7.5))
ax.matshow(cmd, cmap=plt.cm.Blues, alpha=0.3)
for i in range(cmd.shape[0]):
    for j in range(cmd.shape[1]):
        ax.text(x=j, y=i,s=cmd[i, j], va='center', ha='center', size='xx-large')
 
plt.xlabel('Predictions', fontsize=18)
plt.ylabel('Actuals', fontsize=18)
plt.title('Confusion Matrix of SVM', fontsize=18)
plt.show()
fpr3, tpr3, _ = sklearn.metrics.roc_curve(y_test, y_pred)
auc_score3 = sklearn.metrics.auc(fpr3, tpr3)

svma = accuracy_score(y_test, y_pred)

print("SVM accuracy is ")
print(svma)
print("")


testy = y_test
yhat_classes = y_pred
precision = precision_score(testy, yhat_classes)
print('Precision: %f' % precision)
recall = recall_score(testy, yhat_classes)
print('Recall: %f' % recall)
f1 = f1_score(testy, yhat_classes)
print('F1 score: %f' % f1)
 
# kappa
kappa = cohen_kappa_score(testy, yhat_classes)
print('Cohens kappa: %f' % kappa)


#naive bayes training
print("naive bayes training")
model4 =GaussianNB()
model4.fit(X_train, y_train)
y_pred = model4.predict(X_test)
print("ypred of naive bayes ")
print(y_pred)


#confussion Matrix
cm = confusion_matrix(y_test, y_pred)
print("Confussion Matrix for naive bayes")
print(cm)
cmd=cm
fig, ax = plt.subplots(figsize=(7.5, 7.5))
ax.matshow(cmd, cmap=plt.cm.Blues, alpha=0.3)
for i in range(cmd.shape[0]):
    for j in range(cmd.shape[1]):
        ax.text(x=j, y=i,s=cmd[i, j], va='center', ha='center', size='xx-large')
 
plt.xlabel('Predictions', fontsize=18)
plt.ylabel('Actuals', fontsize=18)
plt.title('Confusion Matrix of NB', fontsize=18)
plt.show()
fpr4, tpr4, _ = sklearn.metrics.roc_curve(y_test, y_pred)
auc_score4 = sklearn.metrics.auc(fpr4, tpr4)

nb = accuracy_score(y_test, y_pred)

print("naive bayes accuracy is ")
print(nb)
print("")

testy = y_test
yhat_classes = y_pred
precision = precision_score(testy, yhat_classes)
print('Precision: %f' % precision)
recall = recall_score(testy, yhat_classes)
print('Recall: %f' % recall)
f1 = f1_score(testy, yhat_classes)
print('F1 score: %f' % f1)
 
# kappa
kappa = cohen_kappa_score(testy, yhat_classes)
print('Cohens kappa: %f' % kappa)


plt.figure(figsize=(7, 6))
plt.plot(fpr2, tpr2, color='red',
label='ROC (LR AUC = %0.4f)' % auc_score2)
plt.plot(fpr3, tpr3, color='orange',
label='ROC (SVM AUC = %0.4f)' % auc_score3)
plt.plot(fpr4, tpr4, color='green',
label='ROC (NB AUC = %0.4f)' % auc_score4)
plt.legend(loc='lower right')
plt.title("ROC Curve")
plt.xlabel("FPR")
plt.ylabel("TPR")
plt.show()


data = {'LR':lr, 'SVM':svma, 'NB':nb}
courses = list(data.keys())
values = list(data.values())
  
fig = plt.figure(figsize = (10, 5))
 
# creating the bar plot
plt.bar(courses, values, color ='maroon',
        width = 0.4)
 
plt.xlabel("ML Algorithms")
plt.ylabel("Accuracy")
plt.title("Performance")
plt.show()
print("")
flg=0;

if((lr>svma)and(lr>nb)):
    print("Logistic regression is best")
    flg=1
elif((svma>lr)and(svma>nb)):
    print("SVM is best")
    flg=3
elif((nb>lr)and(nb>svma)):
    print("Naive Bayes is best")
    flg=4


def start():

    print("Process Started")
    dataset = pd.read_csv(f)
    dataset=dataset.dropna(how="any")
    print(dataset)

    print(dataset.info())

    x = dataset.iloc[:,:].values

    # load the model from disk
    if(flg==1):
        ynew=model1.predict(x)
    elif(flg==3):
        ynew=model3.predict(x)
    elif(flg==4):
        ynew=model4.predict(x)
    elif(flg==5):
        ynew=model.predict(x)
    print(ynew)
    ynew = ynew.round()
    app = tk.Tk()
    
    if(ynew[0]==0):
        print("Normal")
        label_file_explorer.configure(text="Result for the patient data: The Input data is Normal")
        app.title("Diabetics Disease Prediction system")
        ttk.Label(app, text="Result for the patient data: The Input data is Normal(Diabetics Not Detected)").grid(column=0,row=0,padx=20,pady=30)  
        menuBar = Menu(app)
        app.config(menu=menuBar)
    else:
        print("Diabetics Disease Predicted")
        label_file_explorer.configure(text="Result for the patient data: Diabetics disease detected")
        app.title("Diabetics Disease Prediction system")
        ttk.Label(app, text="Result for the patient data: Diabetics disease detected").grid(column=0,row=0,padx=20,pady=30)
        menuBar = Menu(app)
        app.config(menu=menuBar)
    
        
if _name_ == '_main_':
    window = Tk()
  
    # Set window title
    window.title('Diabetics disease prediction')
      
    # Set window size
    window.geometry("700x400")
      
    #Set window background color
    window.config(background = "white")
      
    # Create a File Explorer label
    label_file_explorer = Label(window,
                                text = "Please give Input dataset",
                                width = 100, height = 4,
                                fg = "blue")
         
    button_explore = Button(window,
                            text = "Browse patient data Files",
                            command = browseFiles)
    button_exit = Button(window,
                         text = "exit",
                         command = exit)  
    button_start = Button(window,
                         text = "Start Analyzing Data",
                         command = start)

       
    # Grid method is chosen for placing
    # the widgets at respective positions
    # in a table like structure by
    # specifying rows and columns
    label_file_explorer.grid(column = 1, row = 1, padx=5, pady=5)
    button_explore.grid(column = 1, row = 3, padx=5, pady=5)
    button_exit.grid(column = 1,row = 9, padx=5, pady=5)
    button_start.grid(column = 1,row = 12, padx=5, pady=5)
      
    # Let the window wait for any events
    
    
    window.mainloop()